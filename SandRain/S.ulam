// manually edited
//ALTERATION IS FUTILE: THIS FILE AUTOMATICALLY GENERATED FROM S.splat
//CREATED "Thu Jan 28 18:07:14 2021 GMT" BY ../../splattr FOR luke
//BEGIN S.ulam (in ./.splatgen)


/** SandRain - rains sand from the ceiling.
  \symbol S

  \color #fc0

  \symmetries normal, flipx

  \author Luke Wilson

  \license lgpl

  \copyright (C) 2021 Luke Wilson

 */
element S : SPLATInstance {
  // Data members
  virtual Bool evaluateRuleSets() {
    {
      SPLATRuleSet_10S rs;
      if (rs.evaluateRules()) return true;
    }
    return false;   // We got nothing
  }

} // element S

transient SPLATKeyState_10S_At : SPLATKeyStateSelf {
} // transient SPLATKeyState_10S_At

transient SPLATKeyState_10S_S : SPLATKeyState {
  // change S isa Sand 
  Void change(SPLATRuleSet & splATTROoB__rs, SN splATTROoB__cursn, Atom & splATTROoB__curatom) {
   ew[splATTROoB__cursn] = Sand.instanceof;
  }
} // transient SPLATKeyState_10S_S

transient SPLATKeyState_10S_Underline : SPLATKeyStateEmpty {
} // transient SPLATKeyState_10S_Underline

transient SPLATKeyState_10S_e : SPLATKeyState {
  // given e isa Empty { 
  //  Random random;
  //  return random.oneIn(10);
  Bool given(SPLATRuleSet & splATTROoB__rs, SN splATTROoB__cursn, Atom & splATTROoB__curatom) {
    if (!(splATTROoB__curatom is Empty)) return false;
    Empty & splATTROoB__self = (Empty &) splATTROoB__curatom;
  {

   Random random;
   return random.oneIn(10);

  }
  return true;
  }
} // transient SPLATKeyState_10S_e

transient SPLATRuleSet_10S : SPLATRuleSet {
  SPLATKeyState_10S_At key_At;
  SPLATKeyState_10S_S key_S;
  SPLATKeyState_10S_Underline key_Underline;
  SPLATKeyState_10S_e key_e;
  virtual Void reset() {
    super.reset();
    key_At.define('@');
    key_S.define('S');
    key_Underline.define('_');
    key_e.define('e');
  }
  virtual Void beginSiteEval() {
    super.beginSiteEval();
    key_At.beginSiteEval();
    key_S.beginSiteEval();
    key_Underline.beginSiteEval();
    key_e.beginSiteEval();
  }
  virtual SPLATKeyState & getKeyState(ASCII key) {
    which (key) {
    case '@': { return key_At; }
    case 'S': { return key_S; }
    case '_': { return key_Underline; }
    case 'e': { return key_e; }
    }
    return super.getKeyState(key);
  }

  virtual Bool evaluateRules() {
    SPLATRuleDriver pd;
    DebugUtils du;
     m_scratchVars[0] = (
0
);
     m_scratchVars[1] = (
0
);
     m_scratchVars[2] = (
0
);
     m_scratchVars[3] = (
0
);
     m_scratchVars[4] = (
0
);
     m_scratchVars[5] = (
0
);
     m_scratchVars[6] = (
0
);
     m_scratchVars[7] = (
0
);
     m_scratchVars[8] = (
0
);
     m_scratchVars[9] = (
0
);
    //         
    //  _ ->  @
    //  @     _
    if (splatControl.cPRINT_RULES) {
      du.print("Considering:");
      du.print("        ");
      du.print(" _ ->  @");
      du.print(" @     _");
    }
    if (pd.evaluateRule(self, "\000@\002_\377\000_\002@\376")) {
      if (splatControl.cPRINT_RULES) du.print("Success");
      return true;
    };
    //           
    //  @_ ->  @@
    if (splatControl.cPRINT_RULES) {
      du.print("Considering:");
      du.print("          ");
      du.print(" @_ ->  @@");
    }
    if (pd.evaluateRule(self, "\000@\004_\377\000@\004@\376")) {
      if (splatControl.cPRINT_RULES) du.print("Success");
      return true;
    };
    //         
    //  @ ->  @
    //  e     S
    if (splatControl.cPRINT_RULES) {
      du.print("Considering:");
      du.print("        ");
      du.print(" @ ->  @");
      du.print(" e     S");
    }
    if (pd.evaluateRule(self, "\000@\003e\377\000@\003S\376")) {
      if (splatControl.cPRINT_RULES) du.print("Success");
      return true;
    };
    //         
    //  @ ->  @
    if (splatControl.cPRINT_RULES) {
      du.print("Considering:");
      du.print("        ");
      du.print(" @ ->  @");
    }
    if (pd.evaluateRule(self, "\000@\377\000@\376")) {
      if (splatControl.cPRINT_RULES) du.print("Success");
      return true;
    };
    return false;
  }
} // SPLATRuleSet_10S

/** 
  \symbol Sa

  \color #fc0

  \symmetries normal, flipx

  \author Luke Wilson

  \license lgpl

  \copyright (C) 2021 Luke Wilson

 */
element Sand : SPLATInstance {
  // Data members
  virtual Bool evaluateRuleSets() {
    {
      SPLATRuleSet_10Sand rs;
      if (rs.evaluateRules()) return true;
    }
    return false;   // We got nothing
  }

} // element Sand

transient SPLATKeyState_10Sand_At : SPLATKeyStateSelf {
} // transient SPLATKeyState_10Sand_At

transient SPLATKeyState_10Sand_Underline : SPLATKeyStateEmpty {
} // transient SPLATKeyState_10Sand_Underline

transient SPLATRuleSet_10Sand : SPLATRuleSet {
  SPLATKeyState_10Sand_At key_At;
  SPLATKeyState_10Sand_Underline key_Underline;
  virtual Void reset() {
    super.reset();
    key_At.define('@');
    key_Underline.define('_');
  }
  virtual Void beginSiteEval() {
    super.beginSiteEval();
    key_At.beginSiteEval();
    key_Underline.beginSiteEval();
  }
  virtual SPLATKeyState & getKeyState(ASCII key) {
    which (key) {
    case '@': { return key_At; }
    case '_': { return key_Underline; }
    }
    return super.getKeyState(key);
  }

  virtual Bool evaluateRules() {
    SPLATRuleDriver pd;
    DebugUtils du;
     m_scratchVars[0] = (
0
);
     m_scratchVars[1] = (
0
);
     m_scratchVars[2] = (
0
);
     m_scratchVars[3] = (
0
);
     m_scratchVars[4] = (
0
);
     m_scratchVars[5] = (
0
);
     m_scratchVars[6] = (
0
);
     m_scratchVars[7] = (
0
);
     m_scratchVars[8] = (
0
);
     m_scratchVars[9] = (
0
);
    //         
    //  @ ->  _
    //  _     @
    if (splatControl.cPRINT_RULES) {
      du.print("Considering:");
      du.print("        ");
      du.print(" @ ->  _");
      du.print(" _     @");
    }
    if (pd.evaluateRule(self, "\000@\003_\377\000_\003@\376")) {
      if (splatControl.cPRINT_RULES) du.print("Success");
      return true;
    };
    //           
    //  @  ->  _ 
    //   _      @
    if (splatControl.cPRINT_RULES) {
      du.print("Considering:");
      du.print("          ");
      du.print(" @  ->  _ ");
      du.print("  _      @");
    }
    if (pd.evaluateRule(self, "\000@\010_\377\000_\010@\376")) {
      if (splatControl.cPRINT_RULES) du.print("Success");
      return true;
    };
    //         
    //  @ ->  @
    if (splatControl.cPRINT_RULES) {
      du.print("Considering:");
      du.print("        ");
      du.print(" @ ->  @");
    }
    if (pd.evaluateRule(self, "\000@\377\000@\376")) {
      if (splatControl.cPRINT_RULES) du.print("Success");
      return true;
    };
    return false;
  }
} // SPLATRuleSet_10Sand

//END S.ulam
